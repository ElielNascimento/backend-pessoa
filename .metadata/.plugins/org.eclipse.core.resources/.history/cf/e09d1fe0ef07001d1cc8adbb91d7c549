package br.com.backendattornatus.api.pessoaService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import br.com.backendattornatus.api.pessoa.PessoaModel;
import br.com.backendattornatus.api.pessoa.PessoaRepository;
import br.com.backendattornatus.api.pessoa.PessoaService;

@SpringBootTest
public class PessoaServiceTest {


	private static final long ID = 1L;

	private static final String EMAIL = "eliel_bn@gmail.com";

	private static final String CPF = "47303955909";

	private static final String NOME = "Eliel";

	@InjectMocks
	private PessoaService pessoaService;

	@Mock
	private PessoaRepository pessoaRepository;

	@Mock
	private Pageable pageable;

	@Mock
	private PessoaModel pessoaModel;


	private Optional<PessoaModel> optionalPessoa;

	@SuppressWarnings("unchecked")
	@Test
	void listarTodasPessoasComSucesso() {
		Mockito.when(pessoaRepository.findAll(pageable)).thenReturn((Page<PessoaModel>) List.of(pessoaModel));

		List<PessoaModel> response = pessoaService.listarPessoas(pageable).toList();
		assertNotNull(response);

		assertNotNull(response);
		assertEquals(1, response.size());
		assertEquals(PessoaModel.class, response.get(0).getClass());

		
		Assertions.assertEquals(ID,response.get(0).getId());
		Assertions.assertEquals(NOME, response.get(0).getNome());

		

	}

	@Test
	void adicionarPessoasComSucesso() {

	}

	@Test
	void deletarPessoasComSucesso() {

	}

	@Test
	void atualizarPessoasComSucesso() {

	}

	@Test
	void buscarPessoasComSucessoPeloId() {

	}

	void startProduto() {
		pessoaModel = new PessoaModel(ID,NOME, CPF, EMAIL, LocalDate.now());
		optionalPessoa = Optional.of(new PessoaModel( 1l,NOME, CPF, EMAIL, LocalDate.now()));
	}

}
